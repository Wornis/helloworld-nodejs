steps:
  #Will pull the production image so that our build will be faster
  #as docker uses the cached layers of the old images to build new images.
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: [
      '-c',
      'docker pull gcr.io/$PROJECT_ID/$REPO_NAME:latest || exit 0'
    ]

  # This step builds the container image and tag them.
  - name: 'gcr.io/cloud-builders/docker'
    id: Build
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/$REPO_NAME:$SHORT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/$REPO_NAME:latest'
      - '.'

  # Will create yaml config file with correct TAG.
  - name: 'ubuntu'
   # args: ['bash', 'ls /workspace', 'bash', '/workspace/k8s/script.sh "$SHORT_SHA"']
     args: ['cat', '/workspace']
  # Apply all the configuration yamls that exist in the k8s/ folder of our application.
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', '/workspace/deployment_production.yaml']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-west1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=my-cluster'

# push images to Google Container Registry with tags
images: [
  'gcr.io/$PROJECT_ID/$REPO_NAME:$SHORT_SHA',
  'gcr.io/$PROJECT_ID/$REPO_NAME:latest'
]
